# Generated by Django 4.2.7 on 2025-09-08 21:26

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=220, unique=True)),
                ('description', models.TextField()),
                ('problem_statement', models.TextField(help_text='Detailed problem description with examples')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('challenge_type', models.CharField(choices=[('waste_management', 'Waste Management'), ('energy_conservation', 'Energy Conservation'), ('water_conservation', 'Water Conservation'), ('sustainable_transport', 'Sustainable Transport'), ('tree_planting', 'Tree Planting & Gardening'), ('recycling', 'Recycling & Upcycling'), ('climate_action', 'Climate Action'), ('eco_lifestyle', 'Eco-Friendly Lifestyle')], default='waste_management', max_length=50)),
                ('input_format', models.TextField(blank=True, help_text='Description of input format')),
                ('output_format', models.TextField(blank=True, help_text='Description of expected output format')),
                ('constraints', models.TextField(blank=True, help_text='Problem constraints and limitations')),
                ('examples', models.JSONField(default=list, help_text='List of input/output examples')),
                ('hints', models.JSONField(default=list, help_text='List of hints for solving the challenge')),
                ('test_cases', models.JSONField(default=list, help_text='List of test cases with input/expected output')),
                ('hidden_test_cases', models.JSONField(default=list, help_text='Hidden test cases for evaluation')),
                ('solution_code', models.TextField(blank=True, help_text='Reference solution code')),
                ('solution_explanation', models.TextField(blank=True, help_text='Explanation of the solution approach')),
                ('time_limit', models.PositiveIntegerField(default=1000, help_text='Time limit in milliseconds')),
                ('memory_limit', models.PositiveIntegerField(default=256, help_text='Memory limit in MB')),
                ('points_reward', models.PositiveIntegerField(default=100, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('xp_reward', models.PositiveIntegerField(default=50, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submission_count', models.PositiveIntegerField(default=0)),
                ('solved_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_challenges', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenges', to='content.category')),
                ('tags', models.ManyToManyField(blank=True, related_name='challenges', to='content.tag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(help_text='Submitted code')),
                ('language', models.CharField(choices=[('python', 'Python'), ('javascript', 'JavaScript'), ('java', 'Java'), ('cpp', 'C++'), ('c', 'C'), ('csharp', 'C#'), ('go', 'Go'), ('rust', 'Rust'), ('kotlin', 'Kotlin'), ('swift', 'Swift')], default='python', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('accepted', 'Accepted'), ('wrong_answer', 'Wrong Answer'), ('time_limit_exceeded', 'Time Limit Exceeded'), ('memory_limit_exceeded', 'Memory Limit Exceeded'), ('runtime_error', 'Runtime Error'), ('compilation_error', 'Compilation Error'), ('internal_error', 'Internal Error')], default='pending', max_length=30)),
                ('score', models.PositiveIntegerField(default=0, help_text='Score out of 100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('execution_time', models.PositiveIntegerField(blank=True, help_text='Execution time in milliseconds', null=True)),
                ('memory_used', models.PositiveIntegerField(blank=True, help_text='Memory used in KB', null=True)),
                ('test_results', models.JSONField(default=list, help_text='Results for each test case')),
                ('passed_test_cases', models.PositiveIntegerField(default=0)),
                ('total_test_cases', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True, help_text='Error message if submission failed')),
                ('compilation_output', models.TextField(blank=True, help_text='Compilation output/errors')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('evaluated_at', models.DateTimeField(blank=True, null=True)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='challenges.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['challenge', 'user'], name='challenges__challen_6e1ed1_idx'), models.Index(fields=['status', 'submitted_at'], name='challenges__status_ec5182_idx'), models.Index(fields=['user', 'submitted_at'], name='challenges__user_id_9ea69b_idx')],
            },
        ),
        migrations.CreateModel(
            name='ChallengeRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True, help_text='Optional review text')),
                ('difficulty_rating', models.PositiveIntegerField(help_text='How well does the difficulty match the stated level?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('clarity_rating', models.PositiveIntegerField(help_text='How clear is the problem statement?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='challenges.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('challenge', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='challenges.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeDiscussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Discussion content')),
                ('is_solution', models.BooleanField(default=False, help_text='Mark if this is a solution discussion')),
                ('is_spoiler', models.BooleanField(default=False, help_text='Mark if this contains spoilers')),
                ('is_approved', models.BooleanField(default=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='challenges.challenge')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='challenges.challengediscussion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_discussions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['challenge', 'created_at'], name='challenges__challen_c28e79_idx'), models.Index(fields=['user', 'created_at'], name='challenges__user_id_c05f77_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['difficulty_level', 'challenge_type'], name='challenges__difficu_013959_idx'),
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['status', 'published_at'], name='challenges__status_fcde08_idx'),
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['is_featured', 'status'], name='challenges__is_feat_c0ac87_idx'),
        ),
    ]
