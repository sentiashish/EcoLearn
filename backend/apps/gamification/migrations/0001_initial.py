# Generated by Django 4.2.7 on 2025-09-08 20:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('achievement_type', models.CharField(choices=[('first_lesson', 'First Lesson Completed'), ('first_quiz', 'First Quiz Completed'), ('first_challenge', 'First Challenge Solved'), ('streak_milestone', 'Streak Milestone'), ('points_milestone', 'Points Milestone'), ('perfect_quiz', 'Perfect Quiz Score'), ('speed_demon', 'Fast Challenge Solver'), ('helping_hand', 'Helped Other Students'), ('early_bird', 'Early Morning Learner'), ('night_owl', 'Late Night Learner')], max_length=30)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('points_awarded', models.PositiveIntegerField(default=0)),
                ('achieved_at', models.DateTimeField(auto_now_add=True)),
                ('reference_id', models.CharField(blank=True, max_length=100)),
                ('metadata', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'gamification_achievement',
                'ordering': ['-achieved_at'],
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(help_text='Icon class or emoji for the badge', max_length=100)),
                ('badge_type', models.CharField(choices=[('achievement', 'Achievement'), ('milestone', 'Milestone'), ('special', 'Special'), ('seasonal', 'Seasonal')], default='achievement', max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('points_required', models.PositiveIntegerField(default=0, help_text='Minimum points required to earn this badge')),
                ('criteria', models.JSONField(default=dict, help_text='JSON object defining the criteria for earning this badge')),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden badges are not shown until earned')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('earned_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'gamification_badge',
                'ordering': ['rarity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('is_displayed', models.BooleanField(default=True, help_text="Whether this badge is displayed on user's profile")),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'gamification_user_badge',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points', models.IntegerField(help_text='Positive for earning points, negative for losing points', validators=[django.core.validators.MinValueValidator(-10000), django.core.validators.MaxValueValidator(10000)])),
                ('transaction_type', models.CharField(choices=[('lesson_completed', 'Lesson Completed'), ('quiz_completed', 'Quiz Completed'), ('challenge_solved', 'Challenge Solved'), ('daily_login', 'Daily Login'), ('streak_bonus', 'Streak Bonus'), ('badge_earned', 'Badge Earned'), ('admin_adjustment', 'Admin Adjustment'), ('referral_bonus', 'Referral Bonus'), ('contest_reward', 'Contest Reward'), ('penalty', 'Penalty')], max_length=30)),
                ('description', models.CharField(max_length=255)),
                ('reference_id', models.CharField(blank=True, help_text='ID of the related object (lesson, quiz, challenge, etc.)', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional data related to the transaction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'gamification_point_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('leaderboard_type', models.CharField(choices=[('global_points', 'Global Points'), ('weekly_points', 'Weekly Points'), ('monthly_points', 'Monthly Points'), ('challenges_solved', 'Challenges Solved'), ('lessons_completed', 'Lessons Completed'), ('current_streak', 'Current Streak'), ('class_points', 'Class Points')], max_length=30)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('cached_data', models.JSONField(default=dict, help_text='Cached leaderboard data for performance')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leaderboards', to='users.studentclass')),
            ],
            options={
                'db_table': 'gamification_leaderboard',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['badge_type'], name='gamificatio_badge_t_452943_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['rarity'], name='gamificatio_rarity_b6add4_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['is_active'], name='gamificatio_is_acti_972de6_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['points_required'], name='gamificatio_points__dff3e8_idx'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['user', '-earned_at'], name='gamificatio_user_id_1eb32b_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['badge'], name='gamificatio_badge_i_72f86d_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['is_displayed'], name='gamificatio_is_disp_80371e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['user', '-created_at'], name='gamificatio_user_id_1e1e38_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['transaction_type'], name='gamificatio_transac_e1621b_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['reference_id'], name='gamificatio_referen_6e39a5_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['created_at'], name='gamificatio_created_d6b692_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboard',
            index=models.Index(fields=['leaderboard_type'], name='gamificatio_leaderb_2cf5e3_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboard',
            index=models.Index(fields=['is_active'], name='gamificatio_is_acti_9ce823_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboard',
            index=models.Index(fields=['start_date', 'end_date'], name='gamificatio_start_d_5e9485_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboard',
            index=models.Index(fields=['student_class'], name='gamificatio_student_95e389_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['user', '-achieved_at'], name='gamificatio_user_id_8bba76_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['achievement_type'], name='gamificatio_achieve_b19cb1_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['achieved_at'], name='gamificatio_achieve_34d774_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='achievement',
            unique_together={('user', 'achievement_type', 'reference_id')},
        ),
    ]
