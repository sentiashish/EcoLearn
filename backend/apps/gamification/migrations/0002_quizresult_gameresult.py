# Generated by Django 4.2.7 on 2025-09-09 17:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('gamification', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='QuizResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quiz_type', models.CharField(choices=[('eco_quiz', 'Eco Quiz'), ('climate_quiz', 'Climate Quiz'), ('sustainability_quiz', 'Sustainability Quiz'), ('general_environmental', 'General Environmental')], default='eco_quiz', max_length=30)),
                ('score', models.PositiveIntegerField(help_text='Score out of total questions', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_questions', models.PositiveIntegerField(default=10)),
                ('accuracy', models.FloatField(help_text='Accuracy percentage', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('time_spent', models.PositiveIntegerField(help_text='Time spent in seconds')),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('quiz_data', models.JSONField(default=dict, help_text='Additional quiz data like questions answered, etc.')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-completed_at'],
                'indexes': [models.Index(fields=['user', 'quiz_type'], name='gamificatio_user_id_fa80d1_idx'), models.Index(fields=['completed_at'], name='gamificatio_complet_29c35c_idx')],
            },
        ),
        migrations.CreateModel(
            name='GameResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('game_type', models.CharField(choices=[('eco_survival', 'Eco Survival Challenge'), ('ecosystem_builder', 'Ecosystem Builder'), ('carbon_calculator', 'Carbon Calculator'), ('recycling_sorter', 'Recycling Sorter'), ('mini_games', 'Environmental Mini Games')], max_length=30)),
                ('game_status', models.CharField(choices=[('won', 'Won'), ('lost', 'Lost'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='completed', max_length=20)),
                ('score', models.PositiveIntegerField(default=0)),
                ('final_stats', models.JSONField(default=dict, help_text='Final game statistics (health, water, wildlife, etc.)')),
                ('time_spent', models.PositiveIntegerField(help_text='Time spent playing in seconds')),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('achievements_unlocked', models.JSONField(default=list, help_text='List of achievements unlocked during this game')),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('game_data', models.JSONField(default=dict, help_text='Additional game-specific data')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-completed_at'],
                'indexes': [models.Index(fields=['user', 'game_type'], name='gamificatio_user_id_ecbc7b_idx'), models.Index(fields=['completed_at'], name='gamificatio_complet_1ac7ea_idx')],
            },
        ),
    ]
