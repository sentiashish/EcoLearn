# Generated by Django 4.2.7 on 2025-09-08 21:26

import cloudinary.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class name', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('content', models.TextField(help_text='Main lesson content in HTML/Markdown')),
                ('content_type', models.CharField(choices=[('text', 'Text'), ('video', 'Video'), ('interactive', 'Interactive'), ('mixed', 'Mixed')], default='text', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('estimated_duration', models.PositiveIntegerField(help_text='Estimated duration in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('thumbnail', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('video_url', models.URLField(blank=True, help_text='YouTube or Vimeo URL')),
                ('points_reward', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_published', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within category')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_lessons', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='content.category')),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='unlocks', to='content.lesson')),
            ],
            options={
                'ordering': ['category', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('instructions', models.TextField(blank=True, help_text='Special instructions for taking the quiz')),
                ('quiz_type', models.CharField(choices=[('practice', 'Practice'), ('assessment', 'Assessment'), ('challenge', 'Challenge')], default='practice', max_length=20)),
                ('time_limit', models.PositiveIntegerField(blank=True, help_text='Time limit in minutes (null for no limit)', null=True)),
                ('max_attempts', models.PositiveIntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Minimum percentage to pass', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('points_reward', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)])),
                ('shuffle_questions', models.BooleanField(default=True)),
                ('shuffle_answers', models.BooleanField(default=True)),
                ('show_correct_answers', models.BooleanField(default=True, help_text='Show correct answers after completion')),
                ('allow_review', models.BooleanField(default=True, help_text='Allow reviewing answers before submission')),
                ('is_published', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_quizzes', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='content.category')),
                ('lesson', models.ForeignKey(blank=True, help_text='Leave blank for standalone quiz', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='content.lesson')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_questions', models.PositiveIntegerField()),
                ('correct_answers', models.PositiveIntegerField()),
                ('time_taken', models.PositiveIntegerField(help_text='Time taken in seconds')),
                ('is_passed', models.BooleanField(default=False)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='content.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='quiz',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='quizzes', to='content.tag'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('matching', 'Matching'), ('fill_blank', 'Fill in the Blank')], default='multiple_choice', max_length=20)),
                ('explanation', models.TextField(blank=True, help_text='Explanation shown after answering')),
                ('points', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('order', models.PositiveIntegerField(default=0)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='content.quiz')),
            ],
            options={
                'ordering': ['quiz', 'order'],
            },
        ),
        migrations.CreateModel(
            name='LessonCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('time_spent', models.PositiveIntegerField(default=0, help_text='Time spent in seconds')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completions', to='content.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_completions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='lesson',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='lessons', to='content.tag'),
        ),
        migrations.CreateModel(
            name='ContentRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='content.lesson')),
                ('quiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='content.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_ratings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='content.question')),
            ],
            options={
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_answer', models.TextField(blank=True, help_text='For text-based questions')),
                ('is_correct', models.BooleanField(default=False)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='content.quizattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='content.question')),
                ('selected_answer', models.ForeignKey(blank=True, help_text='For multiple choice questions', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.answer')),
            ],
            options={
                'indexes': [models.Index(fields=['attempt', 'question'], name='content_use_attempt_5ae412_idx')],
                'unique_together': {('attempt', 'question')},
            },
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['user', 'quiz', 'attempt_number'], name='content_qui_user_id_7ed855_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['quiz', 'is_passed'], name='content_qui_quiz_id_d75914_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['lesson', 'is_published'], name='content_qui_lesson__0b60ca_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['category', 'is_published'], name='content_qui_categor_d2cce7_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['quiz_type', 'is_published'], name='content_qui_quiz_ty_ab755b_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['quiz', 'order'], name='content_que_quiz_id_c175a0_idx'),
        ),
        migrations.AddIndex(
            model_name='lessoncompletion',
            index=models.Index(fields=['user', 'completed_at'], name='content_les_user_id_1e963a_idx'),
        ),
        migrations.AddIndex(
            model_name='lessoncompletion',
            index=models.Index(fields=['lesson', 'completed_at'], name='content_les_lesson__45d6ba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lessoncompletion',
            unique_together={('user', 'lesson')},
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['category', 'is_published'], name='content_les_categor_236993_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['difficulty_level', 'is_published'], name='content_les_difficu_853adf_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['is_featured', 'is_published'], name='content_les_is_feat_bacafd_idx'),
        ),
        migrations.AddConstraint(
            model_name='contentrating',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('lesson__isnull', False), ('quiz__isnull', True)), models.Q(('lesson__isnull', True), ('quiz__isnull', False)), _connector='OR'), name='rating_content_type_check'),
        ),
        migrations.AlterUniqueTogether(
            name='contentrating',
            unique_together={('user', 'lesson'), ('user', 'quiz')},
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question', 'is_correct'], name='content_ans_questio_7eaadf_idx'),
        ),
    ]
